// <auto-generated />
using System;
using Berberim.Db_context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Berberim.Migrations
{
    [DbContext(typeof(Appdb_context))]
    [Migration("20241214185946_AddIdentityTables")]
    partial class AddIdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Berberim.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("adSoyad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Berberim.Entities.Hizmet", b =>
                {
                    b.Property<int>("hizmetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("hizmetID"));

                    b.Property<double>("hizmetDuration")
                        .HasColumnType("double precision");

                    b.Property<string>("hizmetName")
                        .HasColumnType("text");

                    b.Property<decimal>("hizmetPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("salonID")
                        .HasColumnType("integer");

                    b.HasKey("hizmetID");

                    b.HasIndex("salonID");

                    b.ToTable("hizmets");
                });

            modelBuilder.Entity("Berberim.Entities.Personel", b =>
                {
                    b.Property<int>("personelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("personelID"));

                    b.Property<int>("UzmanlikID")
                        .HasColumnType("integer");

                    b.Property<string>("musaitSaat")
                        .HasColumnType("text");

                    b.Property<string>("personelEmail")
                        .HasColumnType("text");

                    b.Property<string>("personelName")
                        .HasColumnType("text");

                    b.Property<string>("personelPassword")
                        .HasColumnType("text");

                    b.Property<int>("salonID")
                        .HasColumnType("integer");

                    b.HasKey("personelID");

                    b.HasIndex("UzmanlikID");

                    b.HasIndex("salonID");

                    b.ToTable("personnels");
                });

            modelBuilder.Entity("Berberim.Entities.Randevu", b =>
                {
                    b.Property<int>("randevuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("randevuID"));

                    b.Property<int>("MusteriID")
                        .HasColumnType("integer");

                    b.Property<string>("MusteriName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("hizmetID")
                        .HasColumnType("integer");

                    b.Property<string>("hizmetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("onaylandimi")
                        .HasColumnType("boolean");

                    b.Property<int>("personelID")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("randevuSaat")
                        .HasColumnType("interval");

                    b.Property<DateTime>("randevuTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("randevuID");

                    b.HasIndex("MusteriID");

                    b.HasIndex("hizmetID");

                    b.HasIndex("personelID");

                    b.ToTable("randevus");
                });

            modelBuilder.Entity("Berberim.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Berberim.Entities.Salon", b =>
                {
                    b.Property<int>("salonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("salonID"));

                    b.Property<string>("salonAddress")
                        .HasColumnType("text");

                    b.Property<string>("salonName")
                        .HasColumnType("text");

                    b.Property<string>("salonType")
                        .HasColumnType("text");

                    b.Property<string>("workingHours")
                        .HasColumnType("text");

                    b.HasKey("salonID");

                    b.ToTable("salons");
                });

            modelBuilder.Entity("Berberim.Entities.Uzmanlik", b =>
                {
                    b.Property<int>("UzmanlikID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UzmanlikID"));

                    b.Property<string>("UzmanlikName")
                        .HasColumnType("text");

                    b.HasKey("UzmanlikID");

                    b.ToTable("uzmanlıks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Berberim.Entities.Hizmet", b =>
                {
                    b.HasOne("Berberim.Entities.Salon", "salon")
                        .WithMany("Hizmets")
                        .HasForeignKey("salonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("salon");
                });

            modelBuilder.Entity("Berberim.Entities.Personel", b =>
                {
                    b.HasOne("Berberim.Entities.Uzmanlik", "Uzmanliks")
                        .WithMany("personels")
                        .HasForeignKey("UzmanlikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berberim.Entities.Salon", "salon")
                        .WithMany("Personels")
                        .HasForeignKey("salonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uzmanliks");

                    b.Navigation("salon");
                });

            modelBuilder.Entity("Berberim.Entities.Randevu", b =>
                {
                    b.HasOne("Berberim.Entities.AppUser", "Musteri")
                        .WithMany("Randevus")
                        .HasForeignKey("MusteriID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berberim.Entities.Hizmet", "hizmet")
                        .WithMany("Randevus")
                        .HasForeignKey("hizmetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berberim.Entities.Personel", "personel")
                        .WithMany("Randevus")
                        .HasForeignKey("personelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musteri");

                    b.Navigation("hizmet");

                    b.Navigation("personel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Berberim.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Berberim.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Berberim.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Berberim.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Berberim.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Berberim.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Berberim.Entities.AppUser", b =>
                {
                    b.Navigation("Randevus");
                });

            modelBuilder.Entity("Berberim.Entities.Hizmet", b =>
                {
                    b.Navigation("Randevus");
                });

            modelBuilder.Entity("Berberim.Entities.Personel", b =>
                {
                    b.Navigation("Randevus");
                });

            modelBuilder.Entity("Berberim.Entities.Salon", b =>
                {
                    b.Navigation("Hizmets");

                    b.Navigation("Personels");
                });

            modelBuilder.Entity("Berberim.Entities.Uzmanlik", b =>
                {
                    b.Navigation("personels");
                });
#pragma warning restore 612, 618
        }
    }
}
